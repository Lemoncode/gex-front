/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './../../scenes/__root';
import { Route as LoginImport } from './../../scenes/login';
import { Route as AuthImport } from './../../scenes/_auth';
import { Route as AuthIndexImport } from './../../scenes/_auth/index';
import { Route as AuthUsersImport } from './../../scenes/_auth/users';

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any);

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any);

const AuthIndexRoute = AuthIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthRoute,
} as any);

const AuthUsersRoute = AuthUsersImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => AuthRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth';
      path: '';
      fullPath: '';
      preLoaderRoute: typeof AuthImport;
      parentRoute: typeof rootRoute;
    };
    '/login': {
      id: '/login';
      path: '/login';
      fullPath: '/login';
      preLoaderRoute: typeof LoginImport;
      parentRoute: typeof rootRoute;
    };
    '/_auth/users': {
      id: '/_auth/users';
      path: '/users';
      fullPath: '/users';
      preLoaderRoute: typeof AuthUsersImport;
      parentRoute: typeof AuthImport;
    };
    '/_auth/': {
      id: '/_auth/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof AuthIndexImport;
      parentRoute: typeof AuthImport;
    };
  }
}

// Create and export the route tree

interface AuthRouteChildren {
  AuthUsersRoute: typeof AuthUsersRoute;
  AuthIndexRoute: typeof AuthIndexRoute;
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthUsersRoute: AuthUsersRoute,
  AuthIndexRoute: AuthIndexRoute,
};

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren);

export interface FileRoutesByFullPath {
  '': typeof AuthRouteWithChildren;
  '/login': typeof LoginRoute;
  '/users': typeof AuthUsersRoute;
  '/': typeof AuthIndexRoute;
}

export interface FileRoutesByTo {
  '/login': typeof LoginRoute;
  '/users': typeof AuthUsersRoute;
  '/': typeof AuthIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/_auth': typeof AuthRouteWithChildren;
  '/login': typeof LoginRoute;
  '/_auth/users': typeof AuthUsersRoute;
  '/_auth/': typeof AuthIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: '' | '/login' | '/users' | '/';
  fileRoutesByTo: FileRoutesByTo;
  to: '/login' | '/users' | '/';
  id: '__root__' | '/_auth' | '/login' | '/_auth/users' | '/_auth/';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  AuthRoute: typeof AuthRouteWithChildren;
  LoginRoute: typeof LoginRoute;
}

const rootRouteChildren: RootRouteChildren = {
  AuthRoute: AuthRouteWithChildren,
  LoginRoute: LoginRoute,
};

export const routeTree = rootRoute._addFileChildren(rootRouteChildren)._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_auth",
        "/login"
      ]
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/users",
        "/_auth/"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/_auth/users": {
      "filePath": "_auth/users.tsx",
      "parent": "/_auth"
    },
    "/_auth/": {
      "filePath": "_auth/index.tsx",
      "parent": "/_auth"
    }
  }
}
ROUTE_MANIFEST_END */
